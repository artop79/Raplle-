"""
Telegram Bot Service –¥–ª—è AI HR Agent
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Telegram
"""
import logging
import json
from typing import Dict, Any, List, Optional
import asyncio
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
active_sessions = {}
candidate_data = {}

class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º –¥–ª—è HR –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, token: str = None, webhook_url: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Telegram –±–æ—Ç–∞
        
        Args:
            token: API —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            webhook_url: URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.token = token
        self.webhook_url = webhook_url
        self.application = None
        self.is_running = False
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return False
            
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
            self.application = ApplicationBuilder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ webhook –∏–ª–∏ long polling –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if self.webhook_url:
                await self.application.bot.set_webhook(url=self.webhook_url)
                logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {self.webhook_url}")
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
            else:
                # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await self.application.initialize()
                await self.application.start()
                await self.application.updater.start_polling()
                logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling")
                
            self.is_running = True
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application and self.is_running:
            if self.webhook_url:
                await self.application.bot.delete_webhook()
            else:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            self.is_running = False
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_message_to_candidate(self, chat_id: int, message: str, 
                                        reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç—É
        
        Args:
            chat_id: Telegram chat ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç—É {chat_id}: {e}")
            return False
    
    async def send_interview_invitation(self, chat_id: int, position: str, 
                                        company: str, date_time: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
        
        Args:
            chat_id: Telegram chat ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            position: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            company: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            date_time: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        message = (
            f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b>\n\n"
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –í–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é "
            f"<b>{position}</b> –≤ –∫–æ–º–ø–∞–Ω–∏–∏ <b>{company}</b> –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date_time}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ."
        )
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=json.dumps({
                    "action": "confirm_interview",
                    "position": position,
                    "time": date_time
                })),
                InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=json.dumps({
                    "action": "reschedule_interview",
                    "position": position
                }))
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        return await self.send_message_to_candidate(chat_id, message, reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        candidate_id = user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        candidate_data[candidate_id] = {
            "id": candidate_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "registered_at": datetime.now().isoformat()
        }
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! üëã\n\n"
            f"–Ø HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
            f"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å–æ–º –≤–∞—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞\n"
            f"‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            f"–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å–∏–∏", callback_data='{"action":"vacancies"}')],
            [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞", callback_data='{"action":"application_status"}')],
            [InlineKeyboardButton("FAQ", callback_data='{"action":"faq"}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "–Ø HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –Ω–∞–π–º–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."
        )
        await update.message.reply_text(help_message)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        status_message = (
            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞: <b>–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</b>\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        
        await update.message.reply_text(status_message, parse_mode='HTML')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_text = update.message.text
        user_id = update.effective_user.id
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        if "–≤–∞–∫–∞–Ω—Å–∏–∏" in message_text.lower():
            response = "–£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏: Software Developer, UI/UX Designer, Project Manager"
        elif "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ" in message_text.lower():
            response = "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ."
        elif "—Ä–µ–∑—é–º–µ" in message_text.lower():
            response = "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOC. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É."
        else:
            response = (
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—é –µ–≥–æ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É, "
                "–∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        
        await update.message.reply_text(response)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        
        try:
            data = json.loads(query.data)
            action = data.get("action")
            
            if action == "confirm_interview":
                position = data.get("position")
                time = data.get("time")
                response = (
                    f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position} –≤ {time}.\n\n"
                    f"–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è."
                )
                await query.edit_message_text(text=response)
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
                
            elif action == "reschedule_interview":
                position = data.get("position")
                response = (
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position}.\n\n"
                    f"–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
                )
                await query.edit_message_text(text=response)
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                active_sessions[query.from_user.id] = {"action": "waiting_for_reschedule", "position": position}
                
            elif action == "vacancies":
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                vacancies = [
                    {"title": "Software Developer", "id": "sd001"},
                    {"title": "UI/UX Designer", "id": "ux002"},
                    {"title": "Project Manager", "id": "pm003"}
                ]
                
                keyboard = []
                for vacancy in vacancies:
                    keyboard.append([InlineKeyboardButton(
                        vacancy["title"], 
                        callback_data=json.dumps({"action": "vacancy_details", "id": vacancy["id"]})
                    )])
                
                keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='{"action":"back_to_main"}')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                response = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
                await query.edit_message_text(text=response, reply_markup=reply_markup)
                
            elif action == "vacancy_details":
                vacancy_id = data.get("id")
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                
                if vacancy_id == "sd001":
                    details = (
                        "<b>Software Developer</b>\n\n"
                        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
                        "‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 2 –ª–µ—Ç\n"
                        "‚Ä¢ –ó–Ω–∞–Ω–∏–µ JavaScript, React\n"
                        "‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å REST API\n\n"
                        "<b>–£—Å–ª–æ–≤–∏—è:</b>\n"
                        "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
                        "‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
                        "‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"
                    )
                else:
                    details = f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}"
                
                keyboard = [
                    [InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=json.dumps({"action": "apply", "id": vacancy_id}))],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='{"action":"vacancies"}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text=details, reply_markup=reply_markup, parse_mode='HTML')
                
            elif action == "apply":
                vacancy_id = data.get("id")
                response = (
                    f"–ß—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOC.\n\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤."
                )
                
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='{"action":"vacancy_details","id":"' + vacancy_id + '"}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text=response, reply_markup=reply_markup)
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
                active_sessions[query.from_user.id] = {"action": "waiting_for_resume", "vacancy_id": vacancy_id}
                
            elif action == "back_to_main":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                await self.start_command(update, context)
                await query.delete_message()
            
            elif action == "faq":
                faq_text = (
                    "<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
                    "<b>Q: –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞?</b>\n"
                    "A: –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—é–º–µ, –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n"
                    "<b>Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ?</b>\n"
                    "A: –û–±—ã—á–Ω–æ –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–∑—é–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n\n"
                    "<b>Q: –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –ª–∏ –≤—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ?</b>\n"
                    "A: –î–∞, –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—á–Ω–æ, —Ç–∞–∫ –∏ —É–¥–∞–ª–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ Zoom –∏–ª–∏ Teams."
                )
                
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='{"action":"back_to_main"}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text=faq_text, reply_markup=reply_markup, parse_mode='HTML')
                
            elif action == "application_status":
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                status_text = (
                    "<b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞:</b>\n\n"
                    "–ü–æ–∑–∏—Ü–∏—è: Software Developer\n"
                    "–°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
                    "–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: 15.05.2025\n\n"
                    "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                )
                
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='{"action":"back_to_main"}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text=status_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot(token: str, webhook_url: Optional[str] = None):
    """
    –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    
    Args:
        token: API —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        webhook_url: URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    bot_service = TelegramBotService(token, webhook_url)
    success = await bot_service.setup()
    
    if success:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        # –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
        try:
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not webhook_url:
                await asyncio.sleep(3600)  # –†–∞–±–æ—Ç–∞–µ—Ç 1 —á–∞—Å
                await bot_service.stop()
        except (KeyboardInterrupt, SystemExit):
            await bot_service.stop()
    
    return bot_service

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import os
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if token:
        asyncio.run(run_bot(token))
    else:
        print("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
